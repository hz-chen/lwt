/*******************************************
*
* Author: Hongzhou Chen - hzchen_cs@gwmail.gwu.edu
*
*
* Last modified:	12-04-2013 16:04
*
* Filename:		main.c
*
* Description: 
*
* Input: 
*
* Output: 
*
*
******************************************/
#include <stdio.h>
#include <stdlib.h>

#include <lwt/lwt.h>

#define rdtscll(val) __asm__ __volatile__("rdtsc" : "=A" (val))


#define IS_RESET()						\
        assert( lwt_info(LWT_INFO_NTHD_RUNNABLE) == 1 &&	\
		lwt_info(LWT_INFO_NTHD_ZOMBIES) == 0 &&		\
		lwt_info(LWT_INFO_NTHD_BLOCKED) == 0\
		)


#define ITER 100000


void* fn(void* data, lwt_chan_t c)
{
	return NULL;
}

int test_speed_create_join()
{
	int i=0;
	unsigned long long start, end;
	lwt_t tid1, tid2, tid3;

	tid1 = lwt_create(fn, NULL, 0, 0);
	lwt_join(tid1);
	IS_RESET();

	rdtscll(start);
	for(i=0 ; i < ITER; i++)
	{
		tid1 = lwt_create(fn, NULL, 0, 0);
		lwt_join(tid1);
	}
	rdtscll(end);
	IS_RESET();
	printf("performance of fork/join: --> %lld\n", (end-start)/ITER);

	for(i=0 ; i < ITER; i++)
	{
		tid1 = lwt_create(fn, NULL, 0, 0);
		tid2 = lwt_create(fn, NULL, 0, 0);
		tid3 = lwt_create(fn, NULL, 0, 0);
		lwt_join(tid3);
		lwt_join(tid1);
		lwt_join(tid2);
	}

	IS_RESET();


	return 0;
}

void* fn_bounce(void* data, lwt_chan_t c)
{
	int i=0;

	unsigned long long int start, end;

	lwt_yield(LWT_NULL);
	rdtscll(start);
	for(i=0 ; i < ITER; i++)
	{
		lwt_yield(LWT_NULL);
	}
	rdtscll(end);

	if((int)data == 1)
		printf("performance of yield: --> %lld\n", (end-start)/(ITER*2));

	return NULL;
}


void test_speed_yield()
{
	lwt_t tid1, tid2;
	tid1 = lwt_create(fn_bounce, (void*)1, 0, 0);
	tid2 = lwt_create(fn_bounce, NULL, 0, 0);
	lwt_yield(LWT_NULL);
	lwt_join(tid1);
	lwt_join(tid2);
	lwt_yield(LWT_NULL);

	IS_RESET();
}


void* fn_nested_create(void* data, lwt_chan_t c)
{
	int param = (int)data;
	lwt_t id;
	if(param< 5)
	{
		printf("create: %d\n", param);
		id = lwt_create(fn_nested_create, (void*)(param+1), 0, 0);
		lwt_yield(id);
		printf("join: %d\n", param);
		lwt_join(id);
	}
	lwt_yield(LWT_NULL);

	return NULL;
}

void test_function_basic()
{
	lwt_t id;
	IS_RESET();
	id = lwt_create(fn_nested_create, 0, 0, 0);
	lwt_yield(LWT_NULL);
	

	printf("join in parent\n");
	lwt_join(id);
	lwt_yield(LWT_NULL);

	IS_RESET();
}


void *
fn_chan(void *data, lwt_chan_t c)
{
	lwt_chan_t from;
	lwt_chan_t to = data;
	int i;
	
	from = lwt_chan(0);
	lwt_snd_chan(to, from);
	assert(from->snd_cnt);
	for (i = 0 ; i < ITER ; i++) {
		lwt_snd(to, (void*)1);
		assert(2 == (int)lwt_rcv(from));
	}
	lwt_chan_deref(from);
	
	return NULL;
}

void
test_perf_channels(int chsz)
{
	lwt_chan_t from, to;
	lwt_t t;
	int i;
	unsigned long long start, end;

	assert(_LWT_STAT_RUN == lwt_current()->lwt_status);
	from = lwt_chan(chsz);
	assert(from);
	//lwt_chan_grant(from);
	t    = lwt_create(fn_chan, from, 0, 0);
	to   = lwt_rcv_chan(from);
	assert(to->snd_cnt);
	rdtscll(start);
	for (i = 0 ; i < ITER ; i++) {
		assert(1 == (int)lwt_rcv(from));
		lwt_snd(to, (void*)2);
	}
	lwt_chan_deref(to);
	rdtscll(end);
	printf("[PERF] %lld <- snd+rcv (buffer size %d)\n", 
	       (end-start)/(ITER*2), chsz);
	lwt_join(t);
}


int main(int argc, char** argv)
{
	IS_RESET();
	test_function_basic();
//	IS_RESET();
//	test_speed_create_join();
//	IS_RESET();
//	test_speed_yield();
//	IS_RESET();
//	test_perf_channels(0);
//	IS_RESET();

	printf("back to main\n");
	return EXIT_SUCCESS;
}

