1: kthd pool:
	still an array, but I made a structure like:

struct lwt_kthd_tcb{
	kthd_t kthd_index;					//index of current kthd
	pthread_t kthd_id;					//pthread_t
	//following for pointers points to data at thread local storage.
	//so we can use wait free structure to put data into ring buffer
	struct lwt_kthd_evnt (*rbuf)[_LWT_KTHD_EVNT_BUF];
	int *kthd_rbuf_cons_p;
	int *kthd_rbuf_prod_p;
	int *kthd_rbuf_len_p;

	//if the current thread has finish init or not. This is necessary
	//because others may try to access the ring buffer of a kthd even
	//before it inited.
	int done_init;

	//these two are pointers, I can make the kthd pool act like lwt thread pool,
	//make a deadq, active queue and a deactive queue.
	//but this will add a lot concurrency issue and will make the kthd management
	//more complecated.
	kthd_t prev;
	kthd_t next;
};

typedef struct lwt_kthd_tcb * lwt_kthd_t;

2: Monitor lwt thread in kthd 0
	I seperate the function of monitoring ring buffer into a function called:
	__lwt_kthd_rbuf_monitor. When a kthd calls lwt_kthd_create, this function will firstly
	create an additional lwt thread, using this function as routing function to monitor
	the ring buffer of itself.

3: a lot concurrency issue solved:
	Now inter kthd scheduling(basically inter kthd cgrp_wait) works perfectly. The only
	thing is we need to add a sleep() function at the end of main thread, so it will not
	exit before child kthd finish their job.
	But the drawback of adding all these atomic instructions and memory barriers made my
	performance of SND/RCV one time slower than it was before.

3.5: however... I think I need more time to fix them.

4: about kthread pool manager:
	I think I need to create additional variables in kthd_tcb structure. and an additional
	global variable indicating how many kthds are avaliable. This variable, say may be named 
	idle_kthd_cnter, can only been update by the monitor thread or each kthd. for each kthd, 
	if there is only one active lwt thread (length_of_rdyq == 0), I mark myself as idle; if 
	I was not idle, then g_atom_int_dec_and_test(idle_kthd_cnter); otherwise just keep checking
	the ring buffer until someone send me DESTROY signal onto my ring buffer or other commands.


